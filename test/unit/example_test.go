// Code generated by MockGen. DO NOT EDIT.
// Source: C:\dev\GameSparks\go-gs-architecture-team_service\internal\usecases\interfaces.go

// Package mocks is a generated GoMock package.
package unit

import (
	context "context"
	entity "go-gs-architecture-example/internal/entity"
	"go-gs-architecture-example/test/mocks"
	reflect "reflect"
	"testing"

	gomock "github.com/golang/mock/gomock"
)

func TestNewMockUserService(t *testing.T) {
	type args struct {
		ctrl *gomock.Controller
	}
	tests := []struct {
		name string
		args args
		want *mocks.MockUserService
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := mocks.NewMockUserService(tt.args.ctrl); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("NewMockUserService() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockUserService_EXPECT(t *testing.T) {
	tests := []struct {
		name string
		m    *mocks.MockUserService
		want *mocks.MockUserServiceMockRecorder
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.m.EXPECT(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockUserService.EXPECT() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockUserService_GetUserByID(t *testing.T) {
	type args struct {
		ctx context.Context
		id  int64
	}
	tests := []struct {
		name    string
		m       *mocks.MockUserService
		args    args
		want    *entity.User
		wantErr bool
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := tt.m.GetUserByID(tt.args.ctx, tt.args.id)
			if (err != nil) != tt.wantErr {
				t.Errorf("MockUserService.GetUserByID() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockUserService.GetUserByID() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMockUserServiceMockRecorder_GetUserByID(t *testing.T) {
	type args struct {
		ctx interface{}
		id  interface{}
	}
	tests := []struct {
		name string
		mr   *mocks.MockUserServiceMockRecorder
		args args
		want *gomock.Call
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.mr.GetUserByID(tt.args.ctx, tt.args.id); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MockUserServiceMockRecorder.GetUserByID() = %v, want %v", got, tt.want)
			}
		})
	}
}
