// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Tournament is an object representing the database table.
type Tournament struct {
	ID          int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	TourName    string        `boil:"tour_name" json:"tour_name" toml:"tour_name" yaml:"tour_name"`
	GameID      int64         `boil:"game_id" json:"game_id" toml:"game_id" yaml:"game_id"`
	OrganizerID int64         `boil:"organizer_id" json:"organizer_id" toml:"organizer_id" yaml:"organizer_id"`
	Description string        `boil:"description" json:"description" toml:"description" yaml:"description"`
	PrizeFund   types.Decimal `boil:"prize_fund" json:"prize_fund" toml:"prize_fund" yaml:"prize_fund"`
	Status      string        `boil:"status" json:"status" toml:"status" yaml:"status"`
	Type        bool          `boil:"type" json:"type" toml:"type" yaml:"type"`
	StartData   time.Time     `boil:"start_data" json:"start_data" toml:"start_data" yaml:"start_data"`
	EndData     time.Time     `boil:"end_data" json:"end_data" toml:"end_data" yaml:"end_data"`
	CountPlayer int           `boil:"count_player" json:"count_player" toml:"count_player" yaml:"count_player"`
	UpdatedAt   time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt   time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *tournamentR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L tournamentL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TournamentColumns = struct {
	ID          string
	TourName    string
	GameID      string
	OrganizerID string
	Description string
	PrizeFund   string
	Status      string
	Type        string
	StartData   string
	EndData     string
	CountPlayer string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "id",
	TourName:    "tour_name",
	GameID:      "game_id",
	OrganizerID: "organizer_id",
	Description: "description",
	PrizeFund:   "prize_fund",
	Status:      "status",
	Type:        "type",
	StartData:   "start_data",
	EndData:     "end_data",
	CountPlayer: "count_player",
	UpdatedAt:   "updated_at",
	CreatedAt:   "created_at",
}

var TournamentTableColumns = struct {
	ID          string
	TourName    string
	GameID      string
	OrganizerID string
	Description string
	PrizeFund   string
	Status      string
	Type        string
	StartData   string
	EndData     string
	CountPlayer string
	UpdatedAt   string
	CreatedAt   string
}{
	ID:          "tournaments.id",
	TourName:    "tournaments.tour_name",
	GameID:      "tournaments.game_id",
	OrganizerID: "tournaments.organizer_id",
	Description: "tournaments.description",
	PrizeFund:   "tournaments.prize_fund",
	Status:      "tournaments.status",
	Type:        "tournaments.type",
	StartData:   "tournaments.start_data",
	EndData:     "tournaments.end_data",
	CountPlayer: "tournaments.count_player",
	UpdatedAt:   "tournaments.updated_at",
	CreatedAt:   "tournaments.created_at",
}

// Generated where

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var TournamentWhere = struct {
	ID          whereHelperint64
	TourName    whereHelperstring
	GameID      whereHelperint64
	OrganizerID whereHelperint64
	Description whereHelperstring
	PrizeFund   whereHelpertypes_Decimal
	Status      whereHelperstring
	Type        whereHelperbool
	StartData   whereHelpertime_Time
	EndData     whereHelpertime_Time
	CountPlayer whereHelperint
	UpdatedAt   whereHelpertime_Time
	CreatedAt   whereHelpertime_Time
}{
	ID:          whereHelperint64{field: "\"tournaments\".\"id\""},
	TourName:    whereHelperstring{field: "\"tournaments\".\"tour_name\""},
	GameID:      whereHelperint64{field: "\"tournaments\".\"game_id\""},
	OrganizerID: whereHelperint64{field: "\"tournaments\".\"organizer_id\""},
	Description: whereHelperstring{field: "\"tournaments\".\"description\""},
	PrizeFund:   whereHelpertypes_Decimal{field: "\"tournaments\".\"prize_fund\""},
	Status:      whereHelperstring{field: "\"tournaments\".\"status\""},
	Type:        whereHelperbool{field: "\"tournaments\".\"type\""},
	StartData:   whereHelpertime_Time{field: "\"tournaments\".\"start_data\""},
	EndData:     whereHelpertime_Time{field: "\"tournaments\".\"end_data\""},
	CountPlayer: whereHelperint{field: "\"tournaments\".\"count_player\""},
	UpdatedAt:   whereHelpertime_Time{field: "\"tournaments\".\"updated_at\""},
	CreatedAt:   whereHelpertime_Time{field: "\"tournaments\".\"created_at\""},
}

// TournamentRels is where relationship names are stored.
var TournamentRels = struct {
	Game             string
	Matches          string
	TournamentsUsers string
}{
	Game:             "Game",
	Matches:          "Matches",
	TournamentsUsers: "TournamentsUsers",
}

// tournamentR is where relationships are stored.
type tournamentR struct {
	Game             *Game                `boil:"Game" json:"Game" toml:"Game" yaml:"Game"`
	Matches          MatchSlice           `boil:"Matches" json:"Matches" toml:"Matches" yaml:"Matches"`
	TournamentsUsers TournamentsUserSlice `boil:"TournamentsUsers" json:"TournamentsUsers" toml:"TournamentsUsers" yaml:"TournamentsUsers"`
}

// NewStruct creates a new relationship struct
func (*tournamentR) NewStruct() *tournamentR {
	return &tournamentR{}
}

func (r *tournamentR) GetGame() *Game {
	if r == nil {
		return nil
	}
	return r.Game
}

func (r *tournamentR) GetMatches() MatchSlice {
	if r == nil {
		return nil
	}
	return r.Matches
}

func (r *tournamentR) GetTournamentsUsers() TournamentsUserSlice {
	if r == nil {
		return nil
	}
	return r.TournamentsUsers
}

// tournamentL is where Load methods for each relationship are stored.
type tournamentL struct{}

var (
	tournamentAllColumns            = []string{"id", "tour_name", "game_id", "organizer_id", "description", "prize_fund", "status", "type", "start_data", "end_data", "count_player", "updated_at", "created_at"}
	tournamentColumnsWithoutDefault = []string{"tour_name", "game_id", "organizer_id", "description"}
	tournamentColumnsWithDefault    = []string{"id", "prize_fund", "status", "type", "start_data", "end_data", "count_player", "updated_at", "created_at"}
	tournamentPrimaryKeyColumns     = []string{"id"}
	tournamentGeneratedColumns      = []string{}
)

type (
	// TournamentSlice is an alias for a slice of pointers to Tournament.
	// This should almost always be used instead of []Tournament.
	TournamentSlice []*Tournament
	// TournamentHook is the signature for custom Tournament hook methods
	TournamentHook func(context.Context, boil.ContextExecutor, *Tournament) error

	tournamentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tournamentType                 = reflect.TypeOf(&Tournament{})
	tournamentMapping              = queries.MakeStructMapping(tournamentType)
	tournamentPrimaryKeyMapping, _ = queries.BindMapping(tournamentType, tournamentMapping, tournamentPrimaryKeyColumns)
	tournamentInsertCacheMut       sync.RWMutex
	tournamentInsertCache          = make(map[string]insertCache)
	tournamentUpdateCacheMut       sync.RWMutex
	tournamentUpdateCache          = make(map[string]updateCache)
	tournamentUpsertCacheMut       sync.RWMutex
	tournamentUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var tournamentAfterSelectMu sync.Mutex
var tournamentAfterSelectHooks []TournamentHook

var tournamentBeforeInsertMu sync.Mutex
var tournamentBeforeInsertHooks []TournamentHook
var tournamentAfterInsertMu sync.Mutex
var tournamentAfterInsertHooks []TournamentHook

var tournamentBeforeUpdateMu sync.Mutex
var tournamentBeforeUpdateHooks []TournamentHook
var tournamentAfterUpdateMu sync.Mutex
var tournamentAfterUpdateHooks []TournamentHook

var tournamentBeforeDeleteMu sync.Mutex
var tournamentBeforeDeleteHooks []TournamentHook
var tournamentAfterDeleteMu sync.Mutex
var tournamentAfterDeleteHooks []TournamentHook

var tournamentBeforeUpsertMu sync.Mutex
var tournamentBeforeUpsertHooks []TournamentHook
var tournamentAfterUpsertMu sync.Mutex
var tournamentAfterUpsertHooks []TournamentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tournament) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tournament) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tournament) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tournament) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tournament) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tournament) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tournament) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tournament) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tournament) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range tournamentAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTournamentHook registers your hook function for all future operations.
func AddTournamentHook(hookPoint boil.HookPoint, tournamentHook TournamentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		tournamentAfterSelectMu.Lock()
		tournamentAfterSelectHooks = append(tournamentAfterSelectHooks, tournamentHook)
		tournamentAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		tournamentBeforeInsertMu.Lock()
		tournamentBeforeInsertHooks = append(tournamentBeforeInsertHooks, tournamentHook)
		tournamentBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		tournamentAfterInsertMu.Lock()
		tournamentAfterInsertHooks = append(tournamentAfterInsertHooks, tournamentHook)
		tournamentAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		tournamentBeforeUpdateMu.Lock()
		tournamentBeforeUpdateHooks = append(tournamentBeforeUpdateHooks, tournamentHook)
		tournamentBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		tournamentAfterUpdateMu.Lock()
		tournamentAfterUpdateHooks = append(tournamentAfterUpdateHooks, tournamentHook)
		tournamentAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		tournamentBeforeDeleteMu.Lock()
		tournamentBeforeDeleteHooks = append(tournamentBeforeDeleteHooks, tournamentHook)
		tournamentBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		tournamentAfterDeleteMu.Lock()
		tournamentAfterDeleteHooks = append(tournamentAfterDeleteHooks, tournamentHook)
		tournamentAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		tournamentBeforeUpsertMu.Lock()
		tournamentBeforeUpsertHooks = append(tournamentBeforeUpsertHooks, tournamentHook)
		tournamentBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		tournamentAfterUpsertMu.Lock()
		tournamentAfterUpsertHooks = append(tournamentAfterUpsertHooks, tournamentHook)
		tournamentAfterUpsertMu.Unlock()
	}
}

// One returns a single tournament record from the query.
func (q tournamentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Tournament, error) {
	o := &Tournament{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for tournaments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Tournament records from the query.
func (q tournamentQuery) All(ctx context.Context, exec boil.ContextExecutor) (TournamentSlice, error) {
	var o []*Tournament

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Tournament slice")
	}

	if len(tournamentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Tournament records in the query.
func (q tournamentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count tournaments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q tournamentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if tournaments exists")
	}

	return count > 0, nil
}

// Game pointed to by the foreign key.
func (o *Tournament) Game(mods ...qm.QueryMod) gameQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.GameID),
	}

	queryMods = append(queryMods, mods...)

	return Games(queryMods...)
}

// Matches retrieves all the match's Matches with an executor.
func (o *Tournament) Matches(mods ...qm.QueryMod) matchQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"match\".\"tournament_id\"=?", o.ID),
	)

	return Matches(queryMods...)
}

// TournamentsUsers retrieves all the tournaments_user's TournamentsUsers with an executor.
func (o *Tournament) TournamentsUsers(mods ...qm.QueryMod) tournamentsUserQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"tournaments_users\".\"tournament_id\"=?", o.ID),
	)

	return TournamentsUsers(queryMods...)
}

// LoadGame allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (tournamentL) LoadGame(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTournament interface{}, mods queries.Applicator) error {
	var slice []*Tournament
	var object *Tournament

	if singular {
		var ok bool
		object, ok = maybeTournament.(*Tournament)
		if !ok {
			object = new(Tournament)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTournament))
			}
		}
	} else {
		s, ok := maybeTournament.(*[]*Tournament)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTournament))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tournamentR{}
		}
		args[object.GameID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tournamentR{}
			}

			args[obj.GameID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`games`),
		qm.WhereIn(`games.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Game")
	}

	var resultSlice []*Game
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Game")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for games")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for games")
	}

	if len(gameAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Game = foreign
		if foreign.R == nil {
			foreign.R = &gameR{}
		}
		foreign.R.Tournaments = append(foreign.R.Tournaments, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.GameID == foreign.ID {
				local.R.Game = foreign
				if foreign.R == nil {
					foreign.R = &gameR{}
				}
				foreign.R.Tournaments = append(foreign.R.Tournaments, local)
				break
			}
		}
	}

	return nil
}

// LoadMatches allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tournamentL) LoadMatches(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTournament interface{}, mods queries.Applicator) error {
	var slice []*Tournament
	var object *Tournament

	if singular {
		var ok bool
		object, ok = maybeTournament.(*Tournament)
		if !ok {
			object = new(Tournament)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTournament))
			}
		}
	} else {
		s, ok := maybeTournament.(*[]*Tournament)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTournament))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tournamentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tournamentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match`),
		qm.WhereIn(`match.tournament_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on match")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Matches = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &matchR{}
			}
			foreign.R.Tournament = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TournamentID {
				local.R.Matches = append(local.R.Matches, foreign)
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.Tournament = local
				break
			}
		}
	}

	return nil
}

// LoadTournamentsUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (tournamentL) LoadTournamentsUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTournament interface{}, mods queries.Applicator) error {
	var slice []*Tournament
	var object *Tournament

	if singular {
		var ok bool
		object, ok = maybeTournament.(*Tournament)
		if !ok {
			object = new(Tournament)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTournament))
			}
		}
	} else {
		s, ok := maybeTournament.(*[]*Tournament)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTournament)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTournament))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &tournamentR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &tournamentR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tournaments_users`),
		qm.WhereIn(`tournaments_users.tournament_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tournaments_users")
	}

	var resultSlice []*TournamentsUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tournaments_users")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tournaments_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tournaments_users")
	}

	if len(tournamentsUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TournamentsUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &tournamentsUserR{}
			}
			foreign.R.Tournament = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.TournamentID {
				local.R.TournamentsUsers = append(local.R.TournamentsUsers, foreign)
				if foreign.R == nil {
					foreign.R = &tournamentsUserR{}
				}
				foreign.R.Tournament = local
				break
			}
		}
	}

	return nil
}

// SetGame of the tournament to the related item.
// Sets o.R.Game to related.
// Adds o to related.R.Tournaments.
func (o *Tournament) SetGame(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Game) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"tournaments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"game_id"}),
		strmangle.WhereClause("\"", "\"", 2, tournamentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.GameID = related.ID
	if o.R == nil {
		o.R = &tournamentR{
			Game: related,
		}
	} else {
		o.R.Game = related
	}

	if related.R == nil {
		related.R = &gameR{
			Tournaments: TournamentSlice{o},
		}
	} else {
		related.R.Tournaments = append(related.R.Tournaments, o)
	}

	return nil
}

// AddMatches adds the given related objects to the existing relationships
// of the tournament, optionally inserting them as new records.
// Appends related to o.R.Matches.
// Sets related.R.Tournament appropriately.
func (o *Tournament) AddMatches(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Match) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TournamentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"match\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tournament_id"}),
				strmangle.WhereClause("\"", "\"", 2, matchPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TournamentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tournamentR{
			Matches: related,
		}
	} else {
		o.R.Matches = append(o.R.Matches, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &matchR{
				Tournament: o,
			}
		} else {
			rel.R.Tournament = o
		}
	}
	return nil
}

// AddTournamentsUsers adds the given related objects to the existing relationships
// of the tournament, optionally inserting them as new records.
// Appends related to o.R.TournamentsUsers.
// Sets related.R.Tournament appropriately.
func (o *Tournament) AddTournamentsUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*TournamentsUser) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.TournamentID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tournaments_users\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tournament_id"}),
				strmangle.WhereClause("\"", "\"", 2, tournamentsUserPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.TournamentID = o.ID
		}
	}

	if o.R == nil {
		o.R = &tournamentR{
			TournamentsUsers: related,
		}
	} else {
		o.R.TournamentsUsers = append(o.R.TournamentsUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tournamentsUserR{
				Tournament: o,
			}
		} else {
			rel.R.Tournament = o
		}
	}
	return nil
}

// Tournaments retrieves all the records using an executor.
func Tournaments(mods ...qm.QueryMod) tournamentQuery {
	mods = append(mods, qm.From("\"tournaments\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"tournaments\".*"})
	}

	return tournamentQuery{q}
}

// FindTournament retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTournament(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*Tournament, error) {
	tournamentObj := &Tournament{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tournaments\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, tournamentObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from tournaments")
	}

	if err = tournamentObj.doAfterSelectHooks(ctx, exec); err != nil {
		return tournamentObj, err
	}

	return tournamentObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Tournament) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no tournaments provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tournamentColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	tournamentInsertCacheMut.RLock()
	cache, cached := tournamentInsertCache[key]
	tournamentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			tournamentAllColumns,
			tournamentColumnsWithDefault,
			tournamentColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(tournamentType, tournamentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tournamentType, tournamentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tournaments\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tournaments\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into tournaments")
	}

	if !cached {
		tournamentInsertCacheMut.Lock()
		tournamentInsertCache[key] = cache
		tournamentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Tournament.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Tournament) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	tournamentUpdateCacheMut.RLock()
	cache, cached := tournamentUpdateCache[key]
	tournamentUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			tournamentAllColumns,
			tournamentPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update tournaments, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tournaments\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tournamentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tournamentType, tournamentMapping, append(wl, tournamentPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update tournaments row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for tournaments")
	}

	if !cached {
		tournamentUpdateCacheMut.Lock()
		tournamentUpdateCache[key] = cache
		tournamentUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q tournamentQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for tournaments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for tournaments")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TournamentSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tournamentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"tournaments\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, tournamentPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in tournament slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all tournament")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Tournament) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no tournaments provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tournamentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tournamentUpsertCacheMut.RLock()
	cache, cached := tournamentUpsertCache[key]
	tournamentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			tournamentAllColumns,
			tournamentColumnsWithDefault,
			tournamentColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			tournamentAllColumns,
			tournamentPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert tournaments, could not build update column list")
		}

		ret := strmangle.SetComplement(tournamentAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(tournamentPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert tournaments, could not build conflict column list")
			}

			conflict = make([]string, len(tournamentPrimaryKeyColumns))
			copy(conflict, tournamentPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"tournaments\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(tournamentType, tournamentMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tournamentType, tournamentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert tournaments")
	}

	if !cached {
		tournamentUpsertCacheMut.Lock()
		tournamentUpsertCache[key] = cache
		tournamentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Tournament record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tournament) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Tournament provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tournamentPrimaryKeyMapping)
	sql := "DELETE FROM \"tournaments\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from tournaments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for tournaments")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q tournamentQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no tournamentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tournaments")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tournaments")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TournamentSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(tournamentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tournamentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"tournaments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tournamentPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from tournament slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for tournaments")
	}

	if len(tournamentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tournament) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTournament(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TournamentSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TournamentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tournamentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"tournaments\".* FROM \"tournaments\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, tournamentPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TournamentSlice")
	}

	*o = slice

	return nil
}

// TournamentExists checks if the Tournament row exists.
func TournamentExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"tournaments\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if tournaments exists")
	}

	return exists, nil
}

// Exists checks if the Tournament row exists.
func (o *Tournament) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TournamentExists(ctx, exec, o.ID)
}
