// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersStat is an object representing the database table.
type UsersStat struct {
	ID           int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID       int64     `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	GamesPlayed  int64     `boil:"games_played" json:"games_played" toml:"games_played" yaml:"games_played"`
	RatingElo    int       `boil:"rating_elo" json:"rating_elo" toml:"rating_elo" yaml:"rating_elo"`
	HighestElo   int       `boil:"highest_elo" json:"highest_elo" toml:"highest_elo" yaml:"highest_elo"`
	FavoriteGame string    `boil:"favorite_game" json:"favorite_game" toml:"favorite_game" yaml:"favorite_game"`
	Wins         int64     `boil:"wins" json:"wins" toml:"wins" yaml:"wins"`
	Losses       int64     `boil:"losses" json:"losses" toml:"losses" yaml:"losses"`
	Draws        int64     `boil:"draws" json:"draws" toml:"draws" yaml:"draws"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *usersStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersStatColumns = struct {
	ID           string
	UserID       string
	GamesPlayed  string
	RatingElo    string
	HighestElo   string
	FavoriteGame string
	Wins         string
	Losses       string
	Draws        string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "id",
	UserID:       "user_id",
	GamesPlayed:  "games_played",
	RatingElo:    "rating_elo",
	HighestElo:   "highest_elo",
	FavoriteGame: "favorite_game",
	Wins:         "wins",
	Losses:       "losses",
	Draws:        "draws",
	UpdatedAt:    "updated_at",
	CreatedAt:    "created_at",
}

var UsersStatTableColumns = struct {
	ID           string
	UserID       string
	GamesPlayed  string
	RatingElo    string
	HighestElo   string
	FavoriteGame string
	Wins         string
	Losses       string
	Draws        string
	UpdatedAt    string
	CreatedAt    string
}{
	ID:           "users_stats.id",
	UserID:       "users_stats.user_id",
	GamesPlayed:  "users_stats.games_played",
	RatingElo:    "users_stats.rating_elo",
	HighestElo:   "users_stats.highest_elo",
	FavoriteGame: "users_stats.favorite_game",
	Wins:         "users_stats.wins",
	Losses:       "users_stats.losses",
	Draws:        "users_stats.draws",
	UpdatedAt:    "users_stats.updated_at",
	CreatedAt:    "users_stats.created_at",
}

// Generated where

var UsersStatWhere = struct {
	ID           whereHelperint64
	UserID       whereHelperint64
	GamesPlayed  whereHelperint64
	RatingElo    whereHelperint
	HighestElo   whereHelperint
	FavoriteGame whereHelperstring
	Wins         whereHelperint64
	Losses       whereHelperint64
	Draws        whereHelperint64
	UpdatedAt    whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
}{
	ID:           whereHelperint64{field: "\"users_stats\".\"id\""},
	UserID:       whereHelperint64{field: "\"users_stats\".\"user_id\""},
	GamesPlayed:  whereHelperint64{field: "\"users_stats\".\"games_played\""},
	RatingElo:    whereHelperint{field: "\"users_stats\".\"rating_elo\""},
	HighestElo:   whereHelperint{field: "\"users_stats\".\"highest_elo\""},
	FavoriteGame: whereHelperstring{field: "\"users_stats\".\"favorite_game\""},
	Wins:         whereHelperint64{field: "\"users_stats\".\"wins\""},
	Losses:       whereHelperint64{field: "\"users_stats\".\"losses\""},
	Draws:        whereHelperint64{field: "\"users_stats\".\"draws\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"users_stats\".\"updated_at\""},
	CreatedAt:    whereHelpertime_Time{field: "\"users_stats\".\"created_at\""},
}

// UsersStatRels is where relationship names are stored.
var UsersStatRels = struct {
	User string
}{
	User: "User",
}

// usersStatR is where relationships are stored.
type usersStatR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*usersStatR) NewStruct() *usersStatR {
	return &usersStatR{}
}

func (r *usersStatR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// usersStatL is where Load methods for each relationship are stored.
type usersStatL struct{}

var (
	usersStatAllColumns            = []string{"id", "user_id", "games_played", "rating_elo", "highest_elo", "favorite_game", "wins", "losses", "draws", "updated_at", "created_at"}
	usersStatColumnsWithoutDefault = []string{"favorite_game"}
	usersStatColumnsWithDefault    = []string{"id", "user_id", "games_played", "rating_elo", "highest_elo", "wins", "losses", "draws", "updated_at", "created_at"}
	usersStatPrimaryKeyColumns     = []string{"id"}
	usersStatGeneratedColumns      = []string{}
)

type (
	// UsersStatSlice is an alias for a slice of pointers to UsersStat.
	// This should almost always be used instead of []UsersStat.
	UsersStatSlice []*UsersStat
	// UsersStatHook is the signature for custom UsersStat hook methods
	UsersStatHook func(context.Context, boil.ContextExecutor, *UsersStat) error

	usersStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersStatType                 = reflect.TypeOf(&UsersStat{})
	usersStatMapping              = queries.MakeStructMapping(usersStatType)
	usersStatPrimaryKeyMapping, _ = queries.BindMapping(usersStatType, usersStatMapping, usersStatPrimaryKeyColumns)
	usersStatInsertCacheMut       sync.RWMutex
	usersStatInsertCache          = make(map[string]insertCache)
	usersStatUpdateCacheMut       sync.RWMutex
	usersStatUpdateCache          = make(map[string]updateCache)
	usersStatUpsertCacheMut       sync.RWMutex
	usersStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersStatAfterSelectMu sync.Mutex
var usersStatAfterSelectHooks []UsersStatHook

var usersStatBeforeInsertMu sync.Mutex
var usersStatBeforeInsertHooks []UsersStatHook
var usersStatAfterInsertMu sync.Mutex
var usersStatAfterInsertHooks []UsersStatHook

var usersStatBeforeUpdateMu sync.Mutex
var usersStatBeforeUpdateHooks []UsersStatHook
var usersStatAfterUpdateMu sync.Mutex
var usersStatAfterUpdateHooks []UsersStatHook

var usersStatBeforeDeleteMu sync.Mutex
var usersStatBeforeDeleteHooks []UsersStatHook
var usersStatAfterDeleteMu sync.Mutex
var usersStatAfterDeleteHooks []UsersStatHook

var usersStatBeforeUpsertMu sync.Mutex
var usersStatBeforeUpsertHooks []UsersStatHook
var usersStatAfterUpsertMu sync.Mutex
var usersStatAfterUpsertHooks []UsersStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersStatHook registers your hook function for all future operations.
func AddUsersStatHook(hookPoint boil.HookPoint, usersStatHook UsersStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersStatAfterSelectMu.Lock()
		usersStatAfterSelectHooks = append(usersStatAfterSelectHooks, usersStatHook)
		usersStatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersStatBeforeInsertMu.Lock()
		usersStatBeforeInsertHooks = append(usersStatBeforeInsertHooks, usersStatHook)
		usersStatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersStatAfterInsertMu.Lock()
		usersStatAfterInsertHooks = append(usersStatAfterInsertHooks, usersStatHook)
		usersStatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersStatBeforeUpdateMu.Lock()
		usersStatBeforeUpdateHooks = append(usersStatBeforeUpdateHooks, usersStatHook)
		usersStatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersStatAfterUpdateMu.Lock()
		usersStatAfterUpdateHooks = append(usersStatAfterUpdateHooks, usersStatHook)
		usersStatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersStatBeforeDeleteMu.Lock()
		usersStatBeforeDeleteHooks = append(usersStatBeforeDeleteHooks, usersStatHook)
		usersStatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersStatAfterDeleteMu.Lock()
		usersStatAfterDeleteHooks = append(usersStatAfterDeleteHooks, usersStatHook)
		usersStatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersStatBeforeUpsertMu.Lock()
		usersStatBeforeUpsertHooks = append(usersStatBeforeUpsertHooks, usersStatHook)
		usersStatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersStatAfterUpsertMu.Lock()
		usersStatAfterUpsertHooks = append(usersStatAfterUpsertHooks, usersStatHook)
		usersStatAfterUpsertMu.Unlock()
	}
}

// One returns a single usersStat record from the query.
func (q usersStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersStat, error) {
	o := &UsersStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersStat records from the query.
func (q usersStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersStatSlice, error) {
	var o []*UsersStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsersStat slice")
	}

	if len(usersStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersStat records in the query.
func (q usersStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users_stats exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UsersStat) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersStatL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersStat interface{}, mods queries.Applicator) error {
	var slice []*UsersStat
	var object *UsersStat

	if singular {
		var ok bool
		object, ok = maybeUsersStat.(*UsersStat)
		if !ok {
			object = new(UsersStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersStat))
			}
		}
	} else {
		s, ok := maybeUsersStat.(*[]*UsersStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersStatR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersStatR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsersStats = append(foreign.R.UsersStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsersStats = append(foreign.R.UsersStats, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the usersStat to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsersStats.
func (o *UsersStat) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &usersStatR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsersStats: UsersStatSlice{o},
		}
	} else {
		related.R.UsersStats = append(related.R.UsersStats, o)
	}

	return nil
}

// UsersStats retrieves all the records using an executor.
func UsersStats(mods ...qm.QueryMod) usersStatQuery {
	mods = append(mods, qm.From("\"users_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_stats\".*"})
	}

	return usersStatQuery{q}
}

// FindUsersStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersStat(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UsersStat, error) {
	usersStatObj := &UsersStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_stats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usersStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users_stats")
	}

	if err = usersStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersStatObj, err
	}

	return usersStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users_stats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersStatInsertCacheMut.RLock()
	cache, cached := usersStatInsertCache[key]
	usersStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersStatAllColumns,
			usersStatColumnsWithDefault,
			usersStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersStatType, usersStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersStatType, usersStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users_stats")
	}

	if !cached {
		usersStatInsertCacheMut.Lock()
		usersStatInsertCache[key] = cache
		usersStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersStatUpdateCacheMut.RLock()
	cache, cached := usersStatUpdateCache[key]
	usersStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersStatAllColumns,
			usersStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update users_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersStatType, usersStatMapping, append(wl, usersStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update users_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for users_stats")
	}

	if !cached {
		usersStatUpdateCacheMut.Lock()
		usersStatUpdateCache[key] = cache
		usersStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for users_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for users_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usersStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usersStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no users_stats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersStatUpsertCacheMut.RLock()
	cache, cached := usersStatUpsertCache[key]
	usersStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersStatAllColumns,
			usersStatColumnsWithDefault,
			usersStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersStatAllColumns,
			usersStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert users_stats, could not build update column list")
		}

		ret := strmangle.SetComplement(usersStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usersStatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert users_stats, could not build conflict column list")
			}

			conflict = make([]string, len(usersStatPrimaryKeyColumns))
			copy(conflict, usersStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_stats\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usersStatType, usersStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersStatType, usersStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert users_stats")
	}

	if !cached {
		usersStatUpsertCacheMut.Lock()
		usersStatUpsertCache[key] = cache
		usersStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsersStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersStatPrimaryKeyMapping)
	sql := "DELETE FROM \"users_stats\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from users_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for users_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usersStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from users_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usersStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users_stats")
	}

	if len(usersStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersStat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_stats\".* FROM \"users_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsersStatSlice")
	}

	*o = slice

	return nil
}

// UsersStatExists checks if the UsersStat row exists.
func UsersStatExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_stats\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users_stats exists")
	}

	return exists, nil
}

// Exists checks if the UsersStat row exists.
func (o *UsersStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersStatExists(ctx, exec, o.ID)
}
