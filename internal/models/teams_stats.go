// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// TeamsStat is an object representing the database table.
type TeamsStat struct {
	ID                int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	TeamID            int64     `boil:"team_id" json:"team_id" toml:"team_id" yaml:"team_id"`
	Wins              int       `boil:"wins" json:"wins" toml:"wins" yaml:"wins"`
	Losses            int       `boil:"losses" json:"losses" toml:"losses" yaml:"losses"`
	Draws             int       `boil:"draws" json:"draws" toml:"draws" yaml:"draws"`
	RatingElo         int64     `boil:"rating_elo" json:"rating_elo" toml:"rating_elo" yaml:"rating_elo"`
	TournamentsPlayed int       `boil:"tournaments_played" json:"tournaments_played" toml:"tournaments_played" yaml:"tournaments_played"`
	MatchesPlayed     int       `boil:"matches_played" json:"matches_played" toml:"matches_played" yaml:"matches_played"`
	UpdatedAt         time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt         time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *teamsStatR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L teamsStatL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TeamsStatColumns = struct {
	ID                string
	TeamID            string
	Wins              string
	Losses            string
	Draws             string
	RatingElo         string
	TournamentsPlayed string
	MatchesPlayed     string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "id",
	TeamID:            "team_id",
	Wins:              "wins",
	Losses:            "losses",
	Draws:             "draws",
	RatingElo:         "rating_elo",
	TournamentsPlayed: "tournaments_played",
	MatchesPlayed:     "matches_played",
	UpdatedAt:         "updated_at",
	CreatedAt:         "created_at",
}

var TeamsStatTableColumns = struct {
	ID                string
	TeamID            string
	Wins              string
	Losses            string
	Draws             string
	RatingElo         string
	TournamentsPlayed string
	MatchesPlayed     string
	UpdatedAt         string
	CreatedAt         string
}{
	ID:                "teams_stats.id",
	TeamID:            "teams_stats.team_id",
	Wins:              "teams_stats.wins",
	Losses:            "teams_stats.losses",
	Draws:             "teams_stats.draws",
	RatingElo:         "teams_stats.rating_elo",
	TournamentsPlayed: "teams_stats.tournaments_played",
	MatchesPlayed:     "teams_stats.matches_played",
	UpdatedAt:         "teams_stats.updated_at",
	CreatedAt:         "teams_stats.created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var TeamsStatWhere = struct {
	ID                whereHelperint64
	TeamID            whereHelperint64
	Wins              whereHelperint
	Losses            whereHelperint
	Draws             whereHelperint
	RatingElo         whereHelperint64
	TournamentsPlayed whereHelperint
	MatchesPlayed     whereHelperint
	UpdatedAt         whereHelpertime_Time
	CreatedAt         whereHelpertime_Time
}{
	ID:                whereHelperint64{field: "\"teams_stats\".\"id\""},
	TeamID:            whereHelperint64{field: "\"teams_stats\".\"team_id\""},
	Wins:              whereHelperint{field: "\"teams_stats\".\"wins\""},
	Losses:            whereHelperint{field: "\"teams_stats\".\"losses\""},
	Draws:             whereHelperint{field: "\"teams_stats\".\"draws\""},
	RatingElo:         whereHelperint64{field: "\"teams_stats\".\"rating_elo\""},
	TournamentsPlayed: whereHelperint{field: "\"teams_stats\".\"tournaments_played\""},
	MatchesPlayed:     whereHelperint{field: "\"teams_stats\".\"matches_played\""},
	UpdatedAt:         whereHelpertime_Time{field: "\"teams_stats\".\"updated_at\""},
	CreatedAt:         whereHelpertime_Time{field: "\"teams_stats\".\"created_at\""},
}

// TeamsStatRels is where relationship names are stored.
var TeamsStatRels = struct {
	Team string
}{
	Team: "Team",
}

// teamsStatR is where relationships are stored.
type teamsStatR struct {
	Team *Team `boil:"Team" json:"Team" toml:"Team" yaml:"Team"`
}

// NewStruct creates a new relationship struct
func (*teamsStatR) NewStruct() *teamsStatR {
	return &teamsStatR{}
}

func (r *teamsStatR) GetTeam() *Team {
	if r == nil {
		return nil
	}
	return r.Team
}

// teamsStatL is where Load methods for each relationship are stored.
type teamsStatL struct{}

var (
	teamsStatAllColumns            = []string{"id", "team_id", "wins", "losses", "draws", "rating_elo", "tournaments_played", "matches_played", "updated_at", "created_at"}
	teamsStatColumnsWithoutDefault = []string{"team_id"}
	teamsStatColumnsWithDefault    = []string{"id", "wins", "losses", "draws", "rating_elo", "tournaments_played", "matches_played", "updated_at", "created_at"}
	teamsStatPrimaryKeyColumns     = []string{"id"}
	teamsStatGeneratedColumns      = []string{}
)

type (
	// TeamsStatSlice is an alias for a slice of pointers to TeamsStat.
	// This should almost always be used instead of []TeamsStat.
	TeamsStatSlice []*TeamsStat
	// TeamsStatHook is the signature for custom TeamsStat hook methods
	TeamsStatHook func(context.Context, boil.ContextExecutor, *TeamsStat) error

	teamsStatQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	teamsStatType                 = reflect.TypeOf(&TeamsStat{})
	teamsStatMapping              = queries.MakeStructMapping(teamsStatType)
	teamsStatPrimaryKeyMapping, _ = queries.BindMapping(teamsStatType, teamsStatMapping, teamsStatPrimaryKeyColumns)
	teamsStatInsertCacheMut       sync.RWMutex
	teamsStatInsertCache          = make(map[string]insertCache)
	teamsStatUpdateCacheMut       sync.RWMutex
	teamsStatUpdateCache          = make(map[string]updateCache)
	teamsStatUpsertCacheMut       sync.RWMutex
	teamsStatUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var teamsStatAfterSelectMu sync.Mutex
var teamsStatAfterSelectHooks []TeamsStatHook

var teamsStatBeforeInsertMu sync.Mutex
var teamsStatBeforeInsertHooks []TeamsStatHook
var teamsStatAfterInsertMu sync.Mutex
var teamsStatAfterInsertHooks []TeamsStatHook

var teamsStatBeforeUpdateMu sync.Mutex
var teamsStatBeforeUpdateHooks []TeamsStatHook
var teamsStatAfterUpdateMu sync.Mutex
var teamsStatAfterUpdateHooks []TeamsStatHook

var teamsStatBeforeDeleteMu sync.Mutex
var teamsStatBeforeDeleteHooks []TeamsStatHook
var teamsStatAfterDeleteMu sync.Mutex
var teamsStatAfterDeleteHooks []TeamsStatHook

var teamsStatBeforeUpsertMu sync.Mutex
var teamsStatBeforeUpsertHooks []TeamsStatHook
var teamsStatAfterUpsertMu sync.Mutex
var teamsStatAfterUpsertHooks []TeamsStatHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TeamsStat) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TeamsStat) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TeamsStat) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TeamsStat) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TeamsStat) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TeamsStat) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TeamsStat) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TeamsStat) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TeamsStat) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range teamsStatAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTeamsStatHook registers your hook function for all future operations.
func AddTeamsStatHook(hookPoint boil.HookPoint, teamsStatHook TeamsStatHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		teamsStatAfterSelectMu.Lock()
		teamsStatAfterSelectHooks = append(teamsStatAfterSelectHooks, teamsStatHook)
		teamsStatAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		teamsStatBeforeInsertMu.Lock()
		teamsStatBeforeInsertHooks = append(teamsStatBeforeInsertHooks, teamsStatHook)
		teamsStatBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		teamsStatAfterInsertMu.Lock()
		teamsStatAfterInsertHooks = append(teamsStatAfterInsertHooks, teamsStatHook)
		teamsStatAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		teamsStatBeforeUpdateMu.Lock()
		teamsStatBeforeUpdateHooks = append(teamsStatBeforeUpdateHooks, teamsStatHook)
		teamsStatBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		teamsStatAfterUpdateMu.Lock()
		teamsStatAfterUpdateHooks = append(teamsStatAfterUpdateHooks, teamsStatHook)
		teamsStatAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		teamsStatBeforeDeleteMu.Lock()
		teamsStatBeforeDeleteHooks = append(teamsStatBeforeDeleteHooks, teamsStatHook)
		teamsStatBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		teamsStatAfterDeleteMu.Lock()
		teamsStatAfterDeleteHooks = append(teamsStatAfterDeleteHooks, teamsStatHook)
		teamsStatAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		teamsStatBeforeUpsertMu.Lock()
		teamsStatBeforeUpsertHooks = append(teamsStatBeforeUpsertHooks, teamsStatHook)
		teamsStatBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		teamsStatAfterUpsertMu.Lock()
		teamsStatAfterUpsertHooks = append(teamsStatAfterUpsertHooks, teamsStatHook)
		teamsStatAfterUpsertMu.Unlock()
	}
}

// One returns a single teamsStat record from the query.
func (q teamsStatQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TeamsStat, error) {
	o := &TeamsStat{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for teams_stats")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TeamsStat records from the query.
func (q teamsStatQuery) All(ctx context.Context, exec boil.ContextExecutor) (TeamsStatSlice, error) {
	var o []*TeamsStat

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TeamsStat slice")
	}

	if len(teamsStatAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TeamsStat records in the query.
func (q teamsStatQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count teams_stats rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q teamsStatQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if teams_stats exists")
	}

	return count > 0, nil
}

// Team pointed to by the foreign key.
func (o *TeamsStat) Team(mods ...qm.QueryMod) teamQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TeamID),
	}

	queryMods = append(queryMods, mods...)

	return Teams(queryMods...)
}

// LoadTeam allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (teamsStatL) LoadTeam(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTeamsStat interface{}, mods queries.Applicator) error {
	var slice []*TeamsStat
	var object *TeamsStat

	if singular {
		var ok bool
		object, ok = maybeTeamsStat.(*TeamsStat)
		if !ok {
			object = new(TeamsStat)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTeamsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTeamsStat))
			}
		}
	} else {
		s, ok := maybeTeamsStat.(*[]*TeamsStat)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTeamsStat)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTeamsStat))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &teamsStatR{}
		}
		args[object.TeamID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &teamsStatR{}
			}

			args[obj.TeamID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`teams`),
		qm.WhereIn(`teams.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Team")
	}

	var resultSlice []*Team
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Team")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for teams")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for teams")
	}

	if len(teamAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Team = foreign
		if foreign.R == nil {
			foreign.R = &teamR{}
		}
		foreign.R.TeamsStats = append(foreign.R.TeamsStats, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TeamID == foreign.ID {
				local.R.Team = foreign
				if foreign.R == nil {
					foreign.R = &teamR{}
				}
				foreign.R.TeamsStats = append(foreign.R.TeamsStats, local)
				break
			}
		}
	}

	return nil
}

// SetTeam of the teamsStat to the related item.
// Sets o.R.Team to related.
// Adds o to related.R.TeamsStats.
func (o *TeamsStat) SetTeam(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Team) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"teams_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"team_id"}),
		strmangle.WhereClause("\"", "\"", 2, teamsStatPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TeamID = related.ID
	if o.R == nil {
		o.R = &teamsStatR{
			Team: related,
		}
	} else {
		o.R.Team = related
	}

	if related.R == nil {
		related.R = &teamR{
			TeamsStats: TeamsStatSlice{o},
		}
	} else {
		related.R.TeamsStats = append(related.R.TeamsStats, o)
	}

	return nil
}

// TeamsStats retrieves all the records using an executor.
func TeamsStats(mods ...qm.QueryMod) teamsStatQuery {
	mods = append(mods, qm.From("\"teams_stats\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"teams_stats\".*"})
	}

	return teamsStatQuery{q}
}

// FindTeamsStat retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTeamsStat(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*TeamsStat, error) {
	teamsStatObj := &TeamsStat{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"teams_stats\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, teamsStatObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from teams_stats")
	}

	if err = teamsStatObj.doAfterSelectHooks(ctx, exec); err != nil {
		return teamsStatObj, err
	}

	return teamsStatObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TeamsStat) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no teams_stats provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamsStatColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	teamsStatInsertCacheMut.RLock()
	cache, cached := teamsStatInsertCache[key]
	teamsStatInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			teamsStatAllColumns,
			teamsStatColumnsWithDefault,
			teamsStatColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(teamsStatType, teamsStatMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(teamsStatType, teamsStatMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"teams_stats\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"teams_stats\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into teams_stats")
	}

	if !cached {
		teamsStatInsertCacheMut.Lock()
		teamsStatInsertCache[key] = cache
		teamsStatInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TeamsStat.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TeamsStat) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	teamsStatUpdateCacheMut.RLock()
	cache, cached := teamsStatUpdateCache[key]
	teamsStatUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			teamsStatAllColumns,
			teamsStatPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update teams_stats, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"teams_stats\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, teamsStatPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(teamsStatType, teamsStatMapping, append(wl, teamsStatPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update teams_stats row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for teams_stats")
	}

	if !cached {
		teamsStatUpdateCacheMut.Lock()
		teamsStatUpdateCache[key] = cache
		teamsStatUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q teamsStatQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for teams_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for teams_stats")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TeamsStatSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"teams_stats\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, teamsStatPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in teamsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all teamsStat")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TeamsStat) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no teams_stats provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(teamsStatColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	teamsStatUpsertCacheMut.RLock()
	cache, cached := teamsStatUpsertCache[key]
	teamsStatUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			teamsStatAllColumns,
			teamsStatColumnsWithDefault,
			teamsStatColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			teamsStatAllColumns,
			teamsStatPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert teams_stats, could not build update column list")
		}

		ret := strmangle.SetComplement(teamsStatAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(teamsStatPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert teams_stats, could not build conflict column list")
			}

			conflict = make([]string, len(teamsStatPrimaryKeyColumns))
			copy(conflict, teamsStatPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"teams_stats\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(teamsStatType, teamsStatMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(teamsStatType, teamsStatMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert teams_stats")
	}

	if !cached {
		teamsStatUpsertCacheMut.Lock()
		teamsStatUpsertCache[key] = cache
		teamsStatUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TeamsStat record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TeamsStat) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TeamsStat provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), teamsStatPrimaryKeyMapping)
	sql := "DELETE FROM \"teams_stats\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from teams_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for teams_stats")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q teamsStatQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no teamsStatQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from teams_stats")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for teams_stats")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TeamsStatSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(teamsStatBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"teams_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamsStatPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from teamsStat slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for teams_stats")
	}

	if len(teamsStatAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TeamsStat) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTeamsStat(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TeamsStatSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TeamsStatSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), teamsStatPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"teams_stats\".* FROM \"teams_stats\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, teamsStatPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TeamsStatSlice")
	}

	*o = slice

	return nil
}

// TeamsStatExists checks if the TeamsStat row exists.
func TeamsStatExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"teams_stats\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if teams_stats exists")
	}

	return exists, nil
}

// Exists checks if the TeamsStat row exists.
func (o *TeamsStat) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TeamsStatExists(ctx, exec, o.ID)
}
