// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MatchResult is an object representing the database table.
type MatchResult struct {
	ID       int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	MatchID  int64 `boil:"match_id" json:"match_id" toml:"match_id" yaml:"match_id"`
	WinnerID int64 `boil:"winner_id" json:"winner_id" toml:"winner_id" yaml:"winner_id"`
	LoserID  int64 `boil:"loser_id" json:"loser_id" toml:"loser_id" yaml:"loser_id"`

	R *matchResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L matchResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MatchResultColumns = struct {
	ID       string
	MatchID  string
	WinnerID string
	LoserID  string
}{
	ID:       "id",
	MatchID:  "match_id",
	WinnerID: "winner_id",
	LoserID:  "loser_id",
}

var MatchResultTableColumns = struct {
	ID       string
	MatchID  string
	WinnerID string
	LoserID  string
}{
	ID:       "match_result.id",
	MatchID:  "match_result.match_id",
	WinnerID: "match_result.winner_id",
	LoserID:  "match_result.loser_id",
}

// Generated where

var MatchResultWhere = struct {
	ID       whereHelperint64
	MatchID  whereHelperint64
	WinnerID whereHelperint64
	LoserID  whereHelperint64
}{
	ID:       whereHelperint64{field: "\"match_result\".\"id\""},
	MatchID:  whereHelperint64{field: "\"match_result\".\"match_id\""},
	WinnerID: whereHelperint64{field: "\"match_result\".\"winner_id\""},
	LoserID:  whereHelperint64{field: "\"match_result\".\"loser_id\""},
}

// MatchResultRels is where relationship names are stored.
var MatchResultRels = struct {
	Match string
}{
	Match: "Match",
}

// matchResultR is where relationships are stored.
type matchResultR struct {
	Match *Match `boil:"Match" json:"Match" toml:"Match" yaml:"Match"`
}

// NewStruct creates a new relationship struct
func (*matchResultR) NewStruct() *matchResultR {
	return &matchResultR{}
}

func (r *matchResultR) GetMatch() *Match {
	if r == nil {
		return nil
	}
	return r.Match
}

// matchResultL is where Load methods for each relationship are stored.
type matchResultL struct{}

var (
	matchResultAllColumns            = []string{"id", "match_id", "winner_id", "loser_id"}
	matchResultColumnsWithoutDefault = []string{"match_id", "winner_id", "loser_id"}
	matchResultColumnsWithDefault    = []string{"id"}
	matchResultPrimaryKeyColumns     = []string{"id"}
	matchResultGeneratedColumns      = []string{}
)

type (
	// MatchResultSlice is an alias for a slice of pointers to MatchResult.
	// This should almost always be used instead of []MatchResult.
	MatchResultSlice []*MatchResult
	// MatchResultHook is the signature for custom MatchResult hook methods
	MatchResultHook func(context.Context, boil.ContextExecutor, *MatchResult) error

	matchResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	matchResultType                 = reflect.TypeOf(&MatchResult{})
	matchResultMapping              = queries.MakeStructMapping(matchResultType)
	matchResultPrimaryKeyMapping, _ = queries.BindMapping(matchResultType, matchResultMapping, matchResultPrimaryKeyColumns)
	matchResultInsertCacheMut       sync.RWMutex
	matchResultInsertCache          = make(map[string]insertCache)
	matchResultUpdateCacheMut       sync.RWMutex
	matchResultUpdateCache          = make(map[string]updateCache)
	matchResultUpsertCacheMut       sync.RWMutex
	matchResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var matchResultAfterSelectMu sync.Mutex
var matchResultAfterSelectHooks []MatchResultHook

var matchResultBeforeInsertMu sync.Mutex
var matchResultBeforeInsertHooks []MatchResultHook
var matchResultAfterInsertMu sync.Mutex
var matchResultAfterInsertHooks []MatchResultHook

var matchResultBeforeUpdateMu sync.Mutex
var matchResultBeforeUpdateHooks []MatchResultHook
var matchResultAfterUpdateMu sync.Mutex
var matchResultAfterUpdateHooks []MatchResultHook

var matchResultBeforeDeleteMu sync.Mutex
var matchResultBeforeDeleteHooks []MatchResultHook
var matchResultAfterDeleteMu sync.Mutex
var matchResultAfterDeleteHooks []MatchResultHook

var matchResultBeforeUpsertMu sync.Mutex
var matchResultBeforeUpsertHooks []MatchResultHook
var matchResultAfterUpsertMu sync.Mutex
var matchResultAfterUpsertHooks []MatchResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MatchResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MatchResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MatchResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MatchResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MatchResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MatchResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MatchResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MatchResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MatchResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range matchResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMatchResultHook registers your hook function for all future operations.
func AddMatchResultHook(hookPoint boil.HookPoint, matchResultHook MatchResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		matchResultAfterSelectMu.Lock()
		matchResultAfterSelectHooks = append(matchResultAfterSelectHooks, matchResultHook)
		matchResultAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		matchResultBeforeInsertMu.Lock()
		matchResultBeforeInsertHooks = append(matchResultBeforeInsertHooks, matchResultHook)
		matchResultBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		matchResultAfterInsertMu.Lock()
		matchResultAfterInsertHooks = append(matchResultAfterInsertHooks, matchResultHook)
		matchResultAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		matchResultBeforeUpdateMu.Lock()
		matchResultBeforeUpdateHooks = append(matchResultBeforeUpdateHooks, matchResultHook)
		matchResultBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		matchResultAfterUpdateMu.Lock()
		matchResultAfterUpdateHooks = append(matchResultAfterUpdateHooks, matchResultHook)
		matchResultAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		matchResultBeforeDeleteMu.Lock()
		matchResultBeforeDeleteHooks = append(matchResultBeforeDeleteHooks, matchResultHook)
		matchResultBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		matchResultAfterDeleteMu.Lock()
		matchResultAfterDeleteHooks = append(matchResultAfterDeleteHooks, matchResultHook)
		matchResultAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		matchResultBeforeUpsertMu.Lock()
		matchResultBeforeUpsertHooks = append(matchResultBeforeUpsertHooks, matchResultHook)
		matchResultBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		matchResultAfterUpsertMu.Lock()
		matchResultAfterUpsertHooks = append(matchResultAfterUpsertHooks, matchResultHook)
		matchResultAfterUpsertMu.Unlock()
	}
}

// One returns a single matchResult record from the query.
func (q matchResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MatchResult, error) {
	o := &MatchResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for match_result")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MatchResult records from the query.
func (q matchResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (MatchResultSlice, error) {
	var o []*MatchResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MatchResult slice")
	}

	if len(matchResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MatchResult records in the query.
func (q matchResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count match_result rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q matchResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if match_result exists")
	}

	return count > 0, nil
}

// Match pointed to by the foreign key.
func (o *MatchResult) Match(mods ...qm.QueryMod) matchQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MatchID),
	}

	queryMods = append(queryMods, mods...)

	return Matches(queryMods...)
}

// LoadMatch allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (matchResultL) LoadMatch(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMatchResult interface{}, mods queries.Applicator) error {
	var slice []*MatchResult
	var object *MatchResult

	if singular {
		var ok bool
		object, ok = maybeMatchResult.(*MatchResult)
		if !ok {
			object = new(MatchResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMatchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMatchResult))
			}
		}
	} else {
		s, ok := maybeMatchResult.(*[]*MatchResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMatchResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMatchResult))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &matchResultR{}
		}
		args[object.MatchID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &matchResultR{}
			}

			args[obj.MatchID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`match`),
		qm.WhereIn(`match.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Match")
	}

	var resultSlice []*Match
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Match")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for match")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for match")
	}

	if len(matchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Match = foreign
		if foreign.R == nil {
			foreign.R = &matchR{}
		}
		foreign.R.MatchResults = append(foreign.R.MatchResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MatchID == foreign.ID {
				local.R.Match = foreign
				if foreign.R == nil {
					foreign.R = &matchR{}
				}
				foreign.R.MatchResults = append(foreign.R.MatchResults, local)
				break
			}
		}
	}

	return nil
}

// SetMatch of the matchResult to the related item.
// Sets o.R.Match to related.
// Adds o to related.R.MatchResults.
func (o *MatchResult) SetMatch(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Match) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"match_result\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"match_id"}),
		strmangle.WhereClause("\"", "\"", 2, matchResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MatchID = related.ID
	if o.R == nil {
		o.R = &matchResultR{
			Match: related,
		}
	} else {
		o.R.Match = related
	}

	if related.R == nil {
		related.R = &matchR{
			MatchResults: MatchResultSlice{o},
		}
	} else {
		related.R.MatchResults = append(related.R.MatchResults, o)
	}

	return nil
}

// MatchResults retrieves all the records using an executor.
func MatchResults(mods ...qm.QueryMod) matchResultQuery {
	mods = append(mods, qm.From("\"match_result\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"match_result\".*"})
	}

	return matchResultQuery{q}
}

// FindMatchResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMatchResult(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*MatchResult, error) {
	matchResultObj := &MatchResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"match_result\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, matchResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from match_result")
	}

	if err = matchResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return matchResultObj, err
	}

	return matchResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MatchResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no match_result provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	matchResultInsertCacheMut.RLock()
	cache, cached := matchResultInsertCache[key]
	matchResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			matchResultAllColumns,
			matchResultColumnsWithDefault,
			matchResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(matchResultType, matchResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(matchResultType, matchResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"match_result\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"match_result\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into match_result")
	}

	if !cached {
		matchResultInsertCacheMut.Lock()
		matchResultInsertCache[key] = cache
		matchResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MatchResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MatchResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	matchResultUpdateCacheMut.RLock()
	cache, cached := matchResultUpdateCache[key]
	matchResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			matchResultAllColumns,
			matchResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update match_result, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"match_result\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, matchResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(matchResultType, matchResultMapping, append(wl, matchResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update match_result row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for match_result")
	}

	if !cached {
		matchResultUpdateCacheMut.Lock()
		matchResultUpdateCache[key] = cache
		matchResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q matchResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for match_result")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for match_result")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MatchResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"match_result\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, matchResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in matchResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all matchResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MatchResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no match_result provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(matchResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	matchResultUpsertCacheMut.RLock()
	cache, cached := matchResultUpsertCache[key]
	matchResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			matchResultAllColumns,
			matchResultColumnsWithDefault,
			matchResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			matchResultAllColumns,
			matchResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert match_result, could not build update column list")
		}

		ret := strmangle.SetComplement(matchResultAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(matchResultPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert match_result, could not build conflict column list")
			}

			conflict = make([]string, len(matchResultPrimaryKeyColumns))
			copy(conflict, matchResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"match_result\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(matchResultType, matchResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(matchResultType, matchResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert match_result")
	}

	if !cached {
		matchResultUpsertCacheMut.Lock()
		matchResultUpsertCache[key] = cache
		matchResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MatchResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MatchResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MatchResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), matchResultPrimaryKeyMapping)
	sql := "DELETE FROM \"match_result\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from match_result")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for match_result")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q matchResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no matchResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from match_result")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for match_result")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MatchResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(matchResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"match_result\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from matchResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for match_result")
	}

	if len(matchResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MatchResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMatchResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MatchResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MatchResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), matchResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"match_result\".* FROM \"match_result\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, matchResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MatchResultSlice")
	}

	*o = slice

	return nil
}

// MatchResultExists checks if the MatchResult row exists.
func MatchResultExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"match_result\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if match_result exists")
	}

	return exists, nil
}

// Exists checks if the MatchResult row exists.
func (o *MatchResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MatchResultExists(ctx, exec, o.ID)
}
