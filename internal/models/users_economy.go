// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UsersEconomy is an object representing the database table.
type UsersEconomy struct {
	ID        int64         `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    int64         `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Balance   types.Decimal `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	Lightning int64         `boil:"lightning" json:"lightning" toml:"lightning" yaml:"lightning"`
	IsFreeze  bool          `boil:"is_freeze" json:"is_freeze" toml:"is_freeze" yaml:"is_freeze"`
	UpdatedAt time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *usersEconomyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersEconomyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersEconomyColumns = struct {
	ID        string
	UserID    string
	Balance   string
	Lightning string
	IsFreeze  string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "id",
	UserID:    "user_id",
	Balance:   "balance",
	Lightning: "lightning",
	IsFreeze:  "is_freeze",
	UpdatedAt: "updated_at",
	CreatedAt: "created_at",
}

var UsersEconomyTableColumns = struct {
	ID        string
	UserID    string
	Balance   string
	Lightning string
	IsFreeze  string
	UpdatedAt string
	CreatedAt string
}{
	ID:        "users_economy.id",
	UserID:    "users_economy.user_id",
	Balance:   "users_economy.balance",
	Lightning: "users_economy.lightning",
	IsFreeze:  "users_economy.is_freeze",
	UpdatedAt: "users_economy.updated_at",
	CreatedAt: "users_economy.created_at",
}

// Generated where

var UsersEconomyWhere = struct {
	ID        whereHelperint64
	UserID    whereHelperint64
	Balance   whereHelpertypes_Decimal
	Lightning whereHelperint64
	IsFreeze  whereHelperbool
	UpdatedAt whereHelpertime_Time
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"users_economy\".\"id\""},
	UserID:    whereHelperint64{field: "\"users_economy\".\"user_id\""},
	Balance:   whereHelpertypes_Decimal{field: "\"users_economy\".\"balance\""},
	Lightning: whereHelperint64{field: "\"users_economy\".\"lightning\""},
	IsFreeze:  whereHelperbool{field: "\"users_economy\".\"is_freeze\""},
	UpdatedAt: whereHelpertime_Time{field: "\"users_economy\".\"updated_at\""},
	CreatedAt: whereHelpertime_Time{field: "\"users_economy\".\"created_at\""},
}

// UsersEconomyRels is where relationship names are stored.
var UsersEconomyRels = struct {
	User string
}{
	User: "User",
}

// usersEconomyR is where relationships are stored.
type usersEconomyR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*usersEconomyR) NewStruct() *usersEconomyR {
	return &usersEconomyR{}
}

func (r *usersEconomyR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// usersEconomyL is where Load methods for each relationship are stored.
type usersEconomyL struct{}

var (
	usersEconomyAllColumns            = []string{"id", "user_id", "balance", "lightning", "is_freeze", "updated_at", "created_at"}
	usersEconomyColumnsWithoutDefault = []string{}
	usersEconomyColumnsWithDefault    = []string{"id", "user_id", "balance", "lightning", "is_freeze", "updated_at", "created_at"}
	usersEconomyPrimaryKeyColumns     = []string{"id"}
	usersEconomyGeneratedColumns      = []string{}
)

type (
	// UsersEconomySlice is an alias for a slice of pointers to UsersEconomy.
	// This should almost always be used instead of []UsersEconomy.
	UsersEconomySlice []*UsersEconomy
	// UsersEconomyHook is the signature for custom UsersEconomy hook methods
	UsersEconomyHook func(context.Context, boil.ContextExecutor, *UsersEconomy) error

	usersEconomyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersEconomyType                 = reflect.TypeOf(&UsersEconomy{})
	usersEconomyMapping              = queries.MakeStructMapping(usersEconomyType)
	usersEconomyPrimaryKeyMapping, _ = queries.BindMapping(usersEconomyType, usersEconomyMapping, usersEconomyPrimaryKeyColumns)
	usersEconomyInsertCacheMut       sync.RWMutex
	usersEconomyInsertCache          = make(map[string]insertCache)
	usersEconomyUpdateCacheMut       sync.RWMutex
	usersEconomyUpdateCache          = make(map[string]updateCache)
	usersEconomyUpsertCacheMut       sync.RWMutex
	usersEconomyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersEconomyAfterSelectMu sync.Mutex
var usersEconomyAfterSelectHooks []UsersEconomyHook

var usersEconomyBeforeInsertMu sync.Mutex
var usersEconomyBeforeInsertHooks []UsersEconomyHook
var usersEconomyAfterInsertMu sync.Mutex
var usersEconomyAfterInsertHooks []UsersEconomyHook

var usersEconomyBeforeUpdateMu sync.Mutex
var usersEconomyBeforeUpdateHooks []UsersEconomyHook
var usersEconomyAfterUpdateMu sync.Mutex
var usersEconomyAfterUpdateHooks []UsersEconomyHook

var usersEconomyBeforeDeleteMu sync.Mutex
var usersEconomyBeforeDeleteHooks []UsersEconomyHook
var usersEconomyAfterDeleteMu sync.Mutex
var usersEconomyAfterDeleteHooks []UsersEconomyHook

var usersEconomyBeforeUpsertMu sync.Mutex
var usersEconomyBeforeUpsertHooks []UsersEconomyHook
var usersEconomyAfterUpsertMu sync.Mutex
var usersEconomyAfterUpsertHooks []UsersEconomyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersEconomy) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersEconomy) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersEconomy) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersEconomy) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersEconomy) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersEconomy) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersEconomy) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersEconomy) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersEconomy) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersEconomyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersEconomyHook registers your hook function for all future operations.
func AddUsersEconomyHook(hookPoint boil.HookPoint, usersEconomyHook UsersEconomyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersEconomyAfterSelectMu.Lock()
		usersEconomyAfterSelectHooks = append(usersEconomyAfterSelectHooks, usersEconomyHook)
		usersEconomyAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		usersEconomyBeforeInsertMu.Lock()
		usersEconomyBeforeInsertHooks = append(usersEconomyBeforeInsertHooks, usersEconomyHook)
		usersEconomyBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		usersEconomyAfterInsertMu.Lock()
		usersEconomyAfterInsertHooks = append(usersEconomyAfterInsertHooks, usersEconomyHook)
		usersEconomyAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		usersEconomyBeforeUpdateMu.Lock()
		usersEconomyBeforeUpdateHooks = append(usersEconomyBeforeUpdateHooks, usersEconomyHook)
		usersEconomyBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		usersEconomyAfterUpdateMu.Lock()
		usersEconomyAfterUpdateHooks = append(usersEconomyAfterUpdateHooks, usersEconomyHook)
		usersEconomyAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		usersEconomyBeforeDeleteMu.Lock()
		usersEconomyBeforeDeleteHooks = append(usersEconomyBeforeDeleteHooks, usersEconomyHook)
		usersEconomyBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		usersEconomyAfterDeleteMu.Lock()
		usersEconomyAfterDeleteHooks = append(usersEconomyAfterDeleteHooks, usersEconomyHook)
		usersEconomyAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		usersEconomyBeforeUpsertMu.Lock()
		usersEconomyBeforeUpsertHooks = append(usersEconomyBeforeUpsertHooks, usersEconomyHook)
		usersEconomyBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		usersEconomyAfterUpsertMu.Lock()
		usersEconomyAfterUpsertHooks = append(usersEconomyAfterUpsertHooks, usersEconomyHook)
		usersEconomyAfterUpsertMu.Unlock()
	}
}

// One returns a single usersEconomy record from the query.
func (q usersEconomyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersEconomy, error) {
	o := &UsersEconomy{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for users_economy")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersEconomy records from the query.
func (q usersEconomyQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersEconomySlice, error) {
	var o []*UsersEconomy

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UsersEconomy slice")
	}

	if len(usersEconomyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersEconomy records in the query.
func (q usersEconomyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count users_economy rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersEconomyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if users_economy exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *UsersEconomy) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usersEconomyL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsersEconomy interface{}, mods queries.Applicator) error {
	var slice []*UsersEconomy
	var object *UsersEconomy

	if singular {
		var ok bool
		object, ok = maybeUsersEconomy.(*UsersEconomy)
		if !ok {
			object = new(UsersEconomy)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUsersEconomy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUsersEconomy))
			}
		}
	} else {
		s, ok := maybeUsersEconomy.(*[]*UsersEconomy)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUsersEconomy)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUsersEconomy))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &usersEconomyR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usersEconomyR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UsersEconomies = append(foreign.R.UsersEconomies, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UsersEconomies = append(foreign.R.UsersEconomies, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the usersEconomy to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UsersEconomies.
func (o *UsersEconomy) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"users_economy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, usersEconomyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &usersEconomyR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UsersEconomies: UsersEconomySlice{o},
		}
	} else {
		related.R.UsersEconomies = append(related.R.UsersEconomies, o)
	}

	return nil
}

// UsersEconomies retrieves all the records using an executor.
func UsersEconomies(mods ...qm.QueryMod) usersEconomyQuery {
	mods = append(mods, qm.From("\"users_economy\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_economy\".*"})
	}

	return usersEconomyQuery{q}
}

// FindUsersEconomy retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersEconomy(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*UsersEconomy, error) {
	usersEconomyObj := &UsersEconomy{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_economy\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usersEconomyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from users_economy")
	}

	if err = usersEconomyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersEconomyObj, err
	}

	return usersEconomyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersEconomy) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no users_economy provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersEconomyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersEconomyInsertCacheMut.RLock()
	cache, cached := usersEconomyInsertCache[key]
	usersEconomyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersEconomyAllColumns,
			usersEconomyColumnsWithDefault,
			usersEconomyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersEconomyType, usersEconomyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersEconomyType, usersEconomyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_economy\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_economy\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into users_economy")
	}

	if !cached {
		usersEconomyInsertCacheMut.Lock()
		usersEconomyInsertCache[key] = cache
		usersEconomyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersEconomy.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersEconomy) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersEconomyUpdateCacheMut.RLock()
	cache, cached := usersEconomyUpdateCache[key]
	usersEconomyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersEconomyAllColumns,
			usersEconomyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update users_economy, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_economy\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersEconomyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersEconomyType, usersEconomyMapping, append(wl, usersEconomyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update users_economy row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for users_economy")
	}

	if !cached {
		usersEconomyUpdateCacheMut.Lock()
		usersEconomyUpdateCache[key] = cache
		usersEconomyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersEconomyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for users_economy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for users_economy")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersEconomySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersEconomyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_economy\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersEconomyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in usersEconomy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all usersEconomy")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersEconomy) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no users_economy provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersEconomyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersEconomyUpsertCacheMut.RLock()
	cache, cached := usersEconomyUpsertCache[key]
	usersEconomyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			usersEconomyAllColumns,
			usersEconomyColumnsWithDefault,
			usersEconomyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersEconomyAllColumns,
			usersEconomyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert users_economy, could not build update column list")
		}

		ret := strmangle.SetComplement(usersEconomyAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(usersEconomyPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert users_economy, could not build conflict column list")
			}

			conflict = make([]string, len(usersEconomyPrimaryKeyColumns))
			copy(conflict, usersEconomyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_economy\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(usersEconomyType, usersEconomyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersEconomyType, usersEconomyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert users_economy")
	}

	if !cached {
		usersEconomyUpsertCacheMut.Lock()
		usersEconomyUpsertCache[key] = cache
		usersEconomyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersEconomy record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersEconomy) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UsersEconomy provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersEconomyPrimaryKeyMapping)
	sql := "DELETE FROM \"users_economy\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from users_economy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for users_economy")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersEconomyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no usersEconomyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from users_economy")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users_economy")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersEconomySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersEconomyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersEconomyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_economy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersEconomyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from usersEconomy slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for users_economy")
	}

	if len(usersEconomyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersEconomy) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersEconomy(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersEconomySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersEconomySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersEconomyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_economy\".* FROM \"users_economy\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersEconomyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UsersEconomySlice")
	}

	*o = slice

	return nil
}

// UsersEconomyExists checks if the UsersEconomy row exists.
func UsersEconomyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_economy\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if users_economy exists")
	}

	return exists, nil
}

// Exists checks if the UsersEconomy row exists.
func (o *UsersEconomy) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UsersEconomyExists(ctx, exec, o.ID)
}
